from backend.deps import get_current_user
from fastapi import APIRouter, Depends
from core.deps import get_current_user  # <<< add this import

from __future__ import annotations

from typing import Dict, List, Optional
from fastapi import APIRouter, Depends
from fastapi.responses import JSONResponse
from pydantic import BaseModel

from backend.deps import require_organizer

router = APIRouter(prefix="/events", tags=["events"])

class EventCreate(BaseModel):
    title: str
    description: str = ""
    date: str
    location: str

class EventRead(BaseModel):
    id: int
    title: str
    description: str
    date: str
    location: str

_EVENTS: Dict[int, EventRead] = {}
_NEXT_ID = 1

def _get_event_or_none(eid: int) -> Optional[EventRead]:
    return _EVENTS.get(eid)

def _create_event_impl(payload: EventCreate) -> EventRead:
    global _NEXT_ID
    eid = _NEXT_ID
    _NEXT_ID += 1
    ev = EventRead(id=eid, **payload.model_dump())
    _EVENTS[eid] = ev
    return ev

@router.post("/", response_model=EventRead)
def create_event(payload: EventCreate, _: object = Depends(require_organizer)):
    ev = _create_event_impl(payload)
    return JSONResponse(content=ev.model_dump(), status_code=200)

@router.post("", response_model=EventRead)
def create_event_no_slash(payload: EventCreate, _: object = Depends(require_organizer)):
    ev = _create_event_impl(payload)
    return JSONResponse(content=ev.model_dump(), status_code=200)

@router.get("/", response_model=List[EventRead])
def list_events():
    return list(_EVENTS.values())

@router.get("", response_model=List[EventRead])
def list_events_no_slash():
    return list(_EVENTS.values())

