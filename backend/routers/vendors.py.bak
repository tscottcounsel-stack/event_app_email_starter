from backend.deps import get_current_user
from fastapi import APIRouter, Depends
from core.deps import get_current_user  # <<< add this import

from __future__ import annotations

from typing import Dict
from fastapi import APIRouter, Depends, HTTPException, status
from pydantic import BaseModel, ConfigDict

from backend.deps import require_vendor

router = APIRouter(prefix="/vendors", tags=["vendors"])

class VendorCreate(BaseModel):
    model_config = ConfigDict(extra="allow")
    display_name: str
    bio: str = ""

class VendorRead(BaseModel):
    id: int
    user_id: int
    display_name: str
    bio: str
    email: str

_VENDORS: Dict[int, VendorRead] = {}

@router.post("/", response_model=VendorRead, status_code=status.HTTP_201_CREATED)
def create_or_update_vendor(payload: VendorCreate, user=Depends(require_vendor)):
    v = VendorRead(
        id=user.id,
        user_id=user.id,
        display_name=payload.display_name,
        bio=payload.bio,
        email=user.email,
    )
    _VENDORS[user.id] = v
    return v

@router.get("/{vendor_id}", response_model=VendorRead)
def get_vendor(vendor_id: int):
    v = _VENDORS.get(vendor_id)
    if not v:
        raise HTTPException(status_code=404, detail="Vendor not found")
    return v

