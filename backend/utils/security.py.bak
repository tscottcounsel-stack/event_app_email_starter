from __future__ import annotations

import hashlib
import secrets
from typing import Optional

# ultra-simple token store for tests (in-memory)
_ACCESS_TOKENS: dict[str, int] = {}
_REFRESH_TOKENS: dict[str, int] = {}


def _sha256(s: str) -> str:
    return hashlib.sha256(s.encode("utf-8")).hexdigest()


def hash_password(password: str) -> str:
    # deterministic hash good enough for tests
    return _sha256(password)


def verify_password(password: str, password_hash: str) -> bool:
    return hash_password(password) == password_hash


def create_tokens(user_id: int) -> tuple[str, str]:
    access = f"atk_{user_id}_{secrets.token_urlsafe(16)}"
    refresh = f"rtk_{user_id}_{secrets.token_urlsafe(24)}"
    _ACCESS_TOKENS[access] = user_id
    _REFRESH_TOKENS[refresh] = user_id
    return access, refresh


def user_id_from_access(token: str) -> Optional[int]:
    return _ACCESS_TOKENS.get(token)


def user_id_from_refresh(token: str) -> Optional[int]:
    return _REFRESH_TOKENS.get(token)
